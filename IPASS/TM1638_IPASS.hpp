//Boost Software License - Version 1.0 - August 17th, 2003
//
//Permission is hereby granted, free of charge, to any person or organization
//obtaining a copy of the software and accompanying documentation covered by
//this license (the "Software") to use, reproduce, display, distribute,
//execute, and transmit the Software, and to prepare derivative works of the
//Software, and to permit third-parties to whom the Software is furnished to
//do so, all subject to the following:
//
//The copyright notices in the Software and this entire statement, including
//the above license grant, this restriction and the following disclaimer,
//must be included in all copies of the Software, in whole or in part, and
//all derivative works of the Software, unless such copies or derivative
//works are solely in the form of machine-executable object code generated by
//a source language processor.
//
//THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
//SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
//FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
//ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
//DEALINGS IN THE SOFTWARE.
//Author: Ray de Kruif 2-07-2021

///@file
///@brief
///TM1638 CHIP
///@mainpage
///@author Ray de Kruif
///@copyright boost license

#ifndef TM1638_IPASS_HPP
#define TM1638_IPASS_HPP
#include "hwlib.hpp"

//Numbers for the display
#define zero 0x3F // 0
#define one 0x06 // 1
#define two 0x5B // 2
#define three 0x4F // 3
#define four 0x66 // 4
#define five 0x6D // 5
#define six 0x7D // 6
#define seven 0x07 // 7
#define eight 0x7F // 8
#define nine 0x6F // 9

//Characters for the display
#define a 0x77 // a
#define b 0x7C // b
#define c 0x39 // c
#define d 0x5E // d
#define e 0x79 // e
#define f 0x71 // f
#define g 0x3D // g
#define h 0x76 // h
#define i 0x06 // i
#define j 0x1F // j
#define l 0x38 // l
#define n 0x54 // n
#define o 0x3F // o
#define p 0x73 // p
#define q 0x67 // q
#define r 0x50 // r
#define s 0x6D // s
#define t 0x78 // t
#define u 0x3E // u
#define v 0x1C // v
#define y 0x6E // y
#define z 0x5B // z

//Signs for the display
#define min 0x40
#define is 0x48
#define stripelow 0x08
#define point 0x80


//Addresses for the display (from left to right)
#define g1 0xC0 // Display grid1
#define g2 0xC2 // Display grid2
#define g3 0xC4 // Display grid3
#define g4 0xC6 // Display grid4
#define g5 0xC8 // Display grid5
#define g6 0xCA // Display grid6
#define g7 0xCC // Display grid7
#define g8 0xCE // Display grid8

//Addresses LEDS (from left to right)
#define l1 0xC1 // LED1
#define l2 0xC3 // LED2
#define l3 0xC5 // LED3
#define l4 0xC7 // LED4
#define l5 0xC9 // LED5
#define l6 0xCB // LED6
#define l7 0xCD // LED7
#define l8 0xCF // LED8

//LED(S) on or off
#define on 0xFF // on
#define off 0x00 // off

///@brief Class description for the tm1638
///
///First of all in this class there will only be functions made that will be declared in the TM1638.cpp.
///Before we can do that I made the class tm1638 with three output pins: stb, clk and dio.
///These pins are protected so we can easily use them in other classes if we want.
///After that is made a constructor and initialized.
///These are standing in the public.
///Also there are defines in this file so we can use them in de functions. These defines are for characters, numbers and signs.
///@note The include "hwlib.hpp" is for the pins out.
class tm1638 {
protected:
    hwlib::pin_out & stb;
    hwlib::pin_out & clk;
    hwlib::pin_out & dio;

public:
    tm1638(hwlib::pin_out & stb, hwlib::pin_out & clk, hwlib::pin_out & dio):
            stb(stb),
            clk(clk),
            dio(dio)
    {}

    ///@brief Function send
    ///
    ///This function will be used everytime you send something to the tm1638.
    ///First you start with a for loop that will shift to the right everytime when it checks the bit.
    ///After that you want to set the clk low. Then you want to check if the bit is one or zero. If it is one you write to the data one.
    ///Else you write to the data zero. When the data has been send you write to the clk high.
    ///So what you do with this function is really checking what the data is and write it.
    ///@param x This is the byte that you send.
    ///@warning Without this function you can not write anything to the tm1638
    void send(uint8_t x);

    ///@brief Function cmd
    ///
    ///This function will be used to send a command.
    ///First you write the stb, also chip selection, low.
    ///After that we use the send() function to write the data and read it.
    ///Then we just write the stb high again.
    ///So really with this function you can read and write a command.
    ///@param cmd This is the byte that you send as command. As example 0x
    ///@see send()
    ///@note You have three commands: data command setting, display control command setting and address command setting.
    ///@warning Check really good if it is really a command that you give else it does not work.
    void cmd(uint8_t cmd); // Stuurt command keuzes: data command setting, display control command setting en adress command setting

    ///@brief Function data
    ///
    ///This function is used to write data to the display and leds.
    ///We give the address and the data with it.
    ///So as example we can say I want to write to the first grid a eight. Then you send the adress and the data for the eight.
    ///The function itself is a little bit more complicated.
    ///First we use the cmd() function so we can activate the board and send the fixed address at once.
    ///After that you want to write the stb low. So we can send() two times. One for the address and once for the data itself.
    ///Then at last we write the stb high again.
    ///@param addr This is the address byte you send.
    ///@param data This is the data byte you send.
    ///@see send() cmd()
    ///@note If you make defines for the addresses and data you can more easily use it then just everytime searching for the right byte.
    void data(const uint8_t addr, const uint8_t data);

    ///@brief Function activate
    ///
    ///This function is made to activate the board.
    ///Without the board is activated you will not see anything on the display.
    ///@note This function is set on full brightness.
    void activate();

    ///@brief Function clearall
    ///
    ///This function is made to clear the leds and the display.
    ///What it does is that it sends all zero's to the registers.
    ///@note It clears everything so if you only want to clear the grids or leds see clearLEDS() clearGRIDS().
    void clearall(); //Alle grids en leds gaan uit en worden op nul gezet

    ///@brief Function clearLEDS
    ///
    ///This function is made to clear the leds.
    ///What it does is that it sends all zero's to the leds.
    ///@note It clears only the leds so if you only want to clear the grids or both see clearGRIDS() clearall().
    void clearLEDS(); //Alleen de leds worden hier uitgezet en op nul gezet

    ///@brief Function clearGRIDS
    ///
    ///This function is made to clear the display.
    ///What it does is that it sends all zero's to the grids.
    ///@note It clears only the grids so if you only want to clear the leds or both see clearLEDS() clearall().
    void clearGRIDS(); //Alleen de grids worden hier uitgezet en op nul gezet

    ///@brief Function wait
    ///
    /// This function is made to wait.
    /// As example I use it for the left_right_leds().
    /// @param x This is a wait ms, so you put the time it needs to wait in there.
    ///@warning This function is not self written it comes out of the library "hwlib.hpp".
    void wait(int x);

    ///@brief Function left_right_leds
    ///
    ///This function is made to show you can display all leds take turns.
    ///@note In this function I used two other functions.
    ///@see data()  wait()
    void left_right_leds();

    ///@brief
    ///
    ///This function is made to show you can display one up to and including nine.
    ///@note In this function I used two other functions.
    ///@see data()  wait()
    void count_up();

    ///@brief Function count_up_left_right
    ///
    ///This function is made by combinding two functions with eachother.
    ///If you use this function you can see that it shows everytime one of the grids turn on also the led above turns on at the same time.
    ///@note This function is in order as the same function left_right_leds().
    ///@see data()  wait()
    void count_up_left_right();

    ///@brief Function everything_on
    ///
    ///This function is made to turn on every led and grid.
    ///What it does is that it sends all one's to the leds en grids.
    void everything_on();

    ///@brief Function testfunction
    ///
    ///This function is made to test if the tm1638 really works with the grids en leds.
    ///If you run this test it should show the functions: left_right_leds() count_up() count_up_left_right() everything_on() clearall().
    ///@note In this function there is no new code
    ///@see left_right_leds() count_up() count_up_left_right() everything_on() clearall()
    void testfunction(); // gebruik vorige functies

    ///@brief Function binair_count
    ///
    ///This function counts binair. It start by one and ends by fifteen.
    ///This is a good function to run if you try to learn binair and you want to test it
    ///@note This function is open to be expand because its now till 15 it can be till 127
    void binair_count(); // from 0 -> 15

    ///@brief Function alfabet_seven_segment
    ///
    ///This function is made to show which characters you can use from the alfabet on a seven segment display.
    ///@note Because it is a seven segment display you can not show every character.
    ///@warning The characters that are missing is: k,m,w and x.
    void alfabet_seven_segment();

    ///@brief Function case_table
    ///
    ///This function is made for the same purposes as the defines.
    ///Only with the cases it is easier to loop because with the defines you can not loop through it.
    /// @param var This is where you put what you want to see, like 'a'.
    /// @param adress This is where you put the address where you want that var shows.
    void case_table(char var, int adress);

};

#endif