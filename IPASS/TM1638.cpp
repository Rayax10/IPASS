//Boost Software License - Version 1.0 - August 17th, 2003
//
//Permission is hereby granted, free of charge, to any person or organization
//obtaining a copy of the software and accompanying documentation covered by
//this license (the "Software") to use, reproduce, display, distribute,
//execute, and transmit the Software, and to prepare derivative works of the
//Software, and to permit third-parties to whom the Software is furnished to
//do so, all subject to the following:
//
//The copyright notices in the Software and this entire statement, including
//the above license grant, this restriction and the following disclaimer,
//must be included in all copies of the Software, in whole or in part, and
//all derivative works of the Software, unless such copies or derivative
//works are solely in the form of machine-executable object code generated by
//a source language processor.
//
//THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
//SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
//FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
//ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
//DEALINGS IN THE SOFTWARE.
//Author: Ray de Kruif 2-07-2021

#include "TM1638_IPASS.hpp"
#include "hwlib.hpp"


    void tm1638::send(uint8_t x){
        for(uint8_t i_i = 8; i_i; --i_i, x >>= 1){ //For loop per bit begint rechts ipv van links zodat je de laatste 2 kan kijken voor een command
            clk.write(false); //clock begint laag
                if(x & 1){ //Als de bit 1 is write 1
                dio.write(true);
                }else{ // Anders write 0
                 dio.write(false);
                }
            clk.write(true); //Na elke data gaat de clock hoog
        }
    }

    void tm1638::cmd(uint8_t cmd){ // Stuurt command keuzes: data command setting, display control command setting en adress command setting
        stb.write(false);// chip selection, begint laag een eindigt hoog
        send(cmd);//command wordt gestuurd met hulp van de send functie om het overzicht te bewaren
        stb.write(true);
    }

    void tm1638::data(const uint8_t addr, const uint8_t data){
        cmd(0x40 | 0x04); //Command write data to display register en fixed address
        stb.write(false);
        send(addr);//Eerst het meegeven waar het naar toe moet
        send(data);//Daarna wat er gestuurd moet worden
        stb.write(true);
    }

    void tm1638::activate(){ //Board on with full brightness
        cmd(0x8F); //Highest brightness
    }


    void tm1638::clearall(){ //Alle grids en leds gaan uit en worden op nul gezet
        for(uint8_t i_i = 0; i_i <= 127; i_i++){// loop door alle adressen
            data(i_i, off); // stuurt naar elk adress nullen
        }
    }

    void tm1638::everything_on() { //alles aan
        for(uint8_t i_i = 0; i_i <= 127; i_i++){// loop door alle adressen
            data(i_i, on); // stuurt naar elk adress 1111 1111
            if(i_i == on){
                wait(4000);
                clearall();
            }
        }

    }
    void tm1638::clearLEDS(){ //Alleen de leds worden hier uitgezet en op nul gezet
        data(l1, off);
        data(l2, off);
        data(l3, off);
        data(l4, off);
        data(l5, off);
        data(l6, off);
        data(l7, off);
        data(l8, off);
    }

    void tm1638::clearGRIDS(){ //Alleen de grids worden hier uitgezet en op nul gezet
        data(g1, off);
        data(g2, off);
        data(g3, off);
        data(g4, off);
        data(g5, off);
        data(g6, off);
        data(g7, off);
        data(g8, off);
    }

    void tm1638::wait(int x){ //wait functie uit hwlib
        hwlib::wait_ms(x);
    }


    void tm1638::left_right_leds(){
        data(l1, on);
        wait(500);
        data(l1, off);

        data(l2, on);
        wait(500);
        data(l2, off);

        data(l3, on);
        wait(500);
        data(l3, off);

        data(l4, on);
        wait(500);
        data(l4, off);

        data(l5, on);
        wait(500);
        data(l5, off);

        data(l6, on);
        wait(500);
        data(l6, off);

        data(l7, on);
        wait(500);
        data(l7, off);

        data(l8, on);
        wait(500);
        data(l8, off);
    }

    void tm1638::count_up(){

        data(g1, zero);//0
        wait(500);
        data(g1, off);

        data(g2, one);//1
        wait(500);
        data(g2, off);

        data(g3, two);//2
        wait(500);
        data(g3, off);

        data(g4, three);//3
        wait(500);
        data(g4, off);

        data(g5, four);//4
        wait(500);
        data(g5, off);

        data(g6, five);//5
        wait(500);
        data(g6, off);

        data(g7, six);//6
        wait(500);
        data(g7, off);

        data(g8, seven);//7
        wait(500);
        data(g8, off);

        data(g1, eight);//8
        wait(500);
        data(g1, off);

        data(g2, nine);//9
        wait(500);
        data(g2, off);
        clearGRIDS();
    }

    void tm1638::count_up_left_right(){
        data(l1, on);
        data(g1, zero);//0
        wait(500);
        data(l1, off);
        data(g1, off);
        wait(500);

        data(l2, on);
        data(g2, one);//1
        wait(500);
        data(l2, off);
        data(g2, off);
        wait(500);

        data(l3, on);
        data(g3, two);//2
        wait(500);
        data(l3, off);
        data(g3, off);
        wait(500);

        data(l4, on);
        data(g4, three);//3
        wait(500);
        data(l4, off);
        data(g4, off);
        wait(500);

        data(l5, on);
        data(g5, four);//4
        wait(500);
        data(l5, off);
        data(g5, off);
        wait(500);

        data(l6, on);
        data(g6, five);//5
        wait(500);
        data(l6, off);
        data(g6, off);
        wait(500);

        data(l7, on);
        data(g7, six);//6
        wait(500);
        data(l7, off);
        data(g7, off);
        wait(500);

        data(l8, on);
        data(g8, seven);//7
        wait(500);
        data(l8, off);
        data(g8, off);
        wait(500);

        data(l1, on);
        data(g1, eight);//8
        wait(500);
        data(l1, off);
        data(g1, off);
        wait(500);

        data(l2, on);
        data(g2, nine);//9
        wait(500);
        data(l2, off);
        data(g2, off);
        wait(500);
    }

    void tm1638::binair_count(){ // from 0 -> 15
        data(l8, on); // 1
        wait(1000);
        data(l8, off);

        data(l7, on); //2
        wait(1000);
        data(l7, off);

        data(l8, on); // 3
        data(l7, on);
        wait(1000);
        data(l8, off);
        data(l7, off);

        data(l6, on); // 4
        wait(1000);
        data(l6, off);

        data(l8, on); // 5
        data(l6, on);
        wait(1000);
        data(l8, off);
        data(l6, off);

        data(l7, on); // 6
        data(l6, on);
        wait(1000);
        data(l7, off);
        data(l6, off);

        data(l8, on); // 7
        data(l7, on);
        data(l6, on);
        wait(1000);
        data(l8, off);
        data(l7, off);
        data(l6, off);

        data(l5, on); // 8
        wait(1000);
        data(l5, off);

        data(l5, on); // 9
        data(l8, on);
        wait(1000);
        data(l5, off);
        data(l8, off);

        data(l5, on); //10
        data(l7, on);
        wait(1000);
        data(l5, off);
        data(l7, off);

        data(l5, on); //11
        data(l7, on);
        data(l8, on);
        wait(1000);
        data(l5, off);
        data(l7, off);
        data(l8, off);

        data(l5, on); // 12
        data(l6, on);
        wait(1000);
        data(l5, off);
        data(l6, off);

        data(l5, on); // 13
        data(l6, on);
        data(l8, on);
        wait(1000);
        data(l5, off);
        data(l6, off);
        data(l8, off);

        data(l5, on); // 14
        data(l6, on);
        data(l7, on);
        wait(1000);
        data(l5, off);
        data(l6, off);
        data(l7, off);

        data(l5, on); // 15
        data(l6, on);
        data(l7, on);
        data(l8, on);
        wait(1000);
        data(l5, off);
        data(l6, off);
        data(l7, off);
        data(l8, off);
    }

    void tm1638::alfabet_seven_segment(){
        data(g1, a);
        data(g2, b);
        data(g3, c);
        data(g4, d);
        data(g5, e);
        data(g6, f);
        data(g7, g);
        data(g8, h);
        wait(3000);

        data(g1, i);
        data(g2, j);
        data(g3, l);
        data(g4, n);
        data(g5, o);
        data(g6, p);
        data(g7, q);
        data(g8, r);
        wait(3000);
        clearGRIDS();

        data(g1, s);
        data(g2, t);
        data(g3, u);
        data(g4, v);
        data(g5, y);
        data(g6, z);
        wait(3000);
        clearGRIDS();

    }

    void tm1638::testfunction() {
        left_right_leds(); //leds
        wait(100);
        count_up();// grids
        wait(100);
        count_up_left_right(); // leds en grids tegelijkertijd
        wait(100);
        everything_on();
        wait(1000);
        clearall();


    }

    void tm1638::case_table(char var, int adress){
        switch(var){
            case 'a':
                data(adress, a);
                break;
            case 'b':
                data(adress, b);
                break;
            case 'c':
                data(adress, c);
                break;
            case 'd':
                data(adress, d);
                break;
            case 'e':
                data(adress, e);
                break;
            case 'f':
                data(adress, f);
                break;
            case 'g':
                data(adress, g);
                break;
            case 'h':
                data(adress, h);
                break;
            case 'i':
                data(adress, i);
                break;
            case 'j':
                data(adress, j);
                break;
            case 'l':
                data(adress, l);
                break;
            case 'n':
                data(adress, n);
                break;
            case 'o':
                data(adress, o);
                break;
            case 'p':
                data(adress, p);
                break;
            case 'q':
                data(adress, q);
                break;
            case 'r':
                data(adress, r);
                break;
            case 's':
                data(adress, s);
                break;
            case 't':
                data(adress, t);
                break;
            case 'u':
                data(adress, u);
                break;
            case 'v':
                data(adress, v);
                break;
            case 'y':
                data(adress, y);
                break;
            case 'z':
                data(adress, z);
                break;
            case '0':
                data(adress, zero);
                break;
            case '1':
                data(adress, one);
                break;
            case '2':
                data(adress, two);
                break;
            case '3':
                data(adress, three);
                break;
            case '4':
                data(adress, four);
                break;
            case '5':
                data(adress, five);
                break;
            case '6':
                data(adress, six);
                break;
            case '7':
                data(adress, seven);
                break;
            case '8':
                data(adress, eight);
                break;
            case '9':
                data(adress, nine);
                break;
            case '-':
                data(adress, min);
                break;
            case '=':
                data(adress, is);
                break;
            case '_':
                data(adress, stripelow);
                break;
            case '.':
                data(adress, point);
                break;

        }

    }



